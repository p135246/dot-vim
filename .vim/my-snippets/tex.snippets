# My tex snippets 

# The following are modified versions of snippets due to Gilles Castel.
# See https://castel.dev/post/lecture-notes-1/.

# Defines `context "math()"` used to restrict snippets evaluation to math environment.
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

# Begin/end environment
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

# Inline math
snippet mi "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# Displayed math
snippet md "Math" wA
\[
$1
\]
$0
endsnippet

# Automatic single subscript
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# Automatic multiple subscript
context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# Square
context "math()"
snippet sq "^2" iA
^2
endsnippet

# Cube
context "math()"
snippet cb "^3" iA
^3
endsnippet

# Complement
context "math()"
snippet compl "complement" iA
^{c}
endsnippet

# Power
context "math()"
snippet tp "superscript" iA
^{$1}$0
endsnippet

# Fractions
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

#context "math()"
#snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
#\\frac{`!p snip.rv = match.group(1)`}{$1}$0
#endsnippet

#priority 1000
#context "math()"
#snippet '^.*\)/' "() Fraction" wrA
#`!p
#stripped = match.string[:-1]
#depth = 0
#i = len(stripped) - 1
#while True:
#	if stripped[i] == ')': depth += 1
#	if stripped[i] == '(': depth -= 1
#	if depth == 0: break;
#	i -= 1
#snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
#`{$1}$0
#endsnippet

# Fraction from selecting denumerator
#context "math()"
#snippet / "Fraction" iA
#\\frac{${VISUAL}}{$1}$0
#endsnippet

# Overline prefix
context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

# Overline postfix
context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

# Hat prefix
context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

# Hat postfix
context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

# Vector prefix
context "math()"
priority 10
snippet "vec" "vec" riA
\vec{$1}$0
endsnippet

# Vector postfix
context "math()"
priority 100
snippet "(\\?\w+)(vec)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 

# Mathematica block
priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

# Sympy block
priority 1000
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

